/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package obfuscateme;

import java.awt.Desktop;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Abdalhaleem Altamimi - Student ID: 2113263
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        // set IconImage
        icon = new ImageIcon(getClass().getResource("img/icon.jpg"));
        setIconImage(icon.getImage());

        initComponents();
        // Center the frame on the screen.
        this.setLocationRelativeTo(null);
        progressHolderLabel.setVisible(false);
        progressLabel.setVisible(false);
    }
    
    private static Image getImage(String path) {
        java.net.URL imgURL = Main.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL).getImage();
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        selectAPKFileButton = new javax.swing.JButton();
        progressHolderLabel = new javax.swing.JLabel();
        apkFileNameLabel = new javax.swing.JLabel();
        decompileButton = new javax.swing.JButton();
        selectedAPKFileLabel = new javax.swing.JLabel();
        progressLabel = new javax.swing.JLabel();
        linkedInButton = new javax.swing.JButton();
        gitHubProfileButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        loadingLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ObfuscateMe");
        setResizable(false);

        mainPanel.setLayout(null);

        title.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        title.setText("ObfuscateMe");
        mainPanel.add(title);
        title.setBounds(370, 20, 114, 25);

        selectAPKFileButton.setText("Select APK file");
        selectAPKFileButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        selectAPKFileButton.setFocusable(false);
        selectAPKFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAPKFileButtonActionPerformed(evt);
            }
        });
        mainPanel.add(selectAPKFileButton);
        selectAPKFileButton.setBounds(360, 210, 140, 46);

        progressHolderLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        progressHolderLabel.setText("Progress:");
        progressHolderLabel.setEnabled(false);
        mainPanel.add(progressHolderLabel);
        progressHolderLabel.setBounds(260, 360, 100, 25);

        apkFileNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        apkFileNameLabel.setForeground(new java.awt.Color(255, 0, 0));
        apkFileNameLabel.setText("Please select an APK file");
        mainPanel.add(apkFileNameLabel);
        apkFileNameLabel.setBounds(420, 260, 350, 30);

        decompileButton.setText("Decompile");
        decompileButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        decompileButton.setEnabled(false);
        decompileButton.setFocusable(false);
        decompileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decompileButtonActionPerformed(evt);
            }
        });
        mainPanel.add(decompileButton);
        decompileButton.setBounds(360, 300, 140, 46);

        selectedAPKFileLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        selectedAPKFileLabel.setText("Selected APK file:");
        mainPanel.add(selectedAPKFileLabel);
        selectedAPKFileLabel.setBounds(250, 260, 150, 30);

        progressLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        progressLabel.setForeground(new java.awt.Color(255, 0, 0));
        progressLabel.setText("Progress");
        progressLabel.setEnabled(false);
        mainPanel.add(progressLabel);
        progressLabel.setBounds(360, 360, 500, 25);

        linkedInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obfuscateme/img/linkedin.png"))); // NOI18N
        linkedInButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        linkedInButton.setFocusable(false);
        linkedInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedInButtonActionPerformed(evt);
            }
        });
        mainPanel.add(linkedInButton);
        linkedInButton.setBounds(70, 390, 50, 50);

        gitHubProfileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obfuscateme/img/github-48.png"))); // NOI18N
        gitHubProfileButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gitHubProfileButton.setFocusable(false);
        gitHubProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gitHubProfileButtonActionPerformed(evt);
            }
        });
        mainPanel.add(gitHubProfileButton);
        gitHubProfileButton.setBounds(10, 390, 50, 50);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obfuscateme/img/final 1 _ 140x130.jpg"))); // NOI18N
        mainPanel.add(jLabel1);
        jLabel1.setBounds(360, 50, 140, 130);

        loadingLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obfuscateme/img/loading.gif"))); // NOI18N
        mainPanel.add(loadingLabel);
        loadingLabel.setBounds(410, 390, 48, 48);
        loadingLabel.setVisible(false);

        jLabel2.setText("Obfuscation tool for APK");
        mainPanel.add(jLabel2);
        jLabel2.setBounds(370, 180, 150, 20);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel3.setText("Developed by Abdalhaleem Altamimi - @ReSo7200");
        mainPanel.add(jLabel3);
        jLabel3.setBounds(560, 400, 340, 20);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel4.setText("University of Bedfordshire Undergradute Project - Student ID: 2113263");
        mainPanel.add(jLabel4);
        jLabel4.setBounds(520, 430, 380, 16);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectAPKFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAPKFileButtonActionPerformed
        // TODO add your handling code here:
        // JFileChooser configured to select only APK files
        JFileChooser j = new JFileChooser(System.getProperty("user.dir"));
        j.setAcceptAllFileFilterUsed(false);
        j.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("APK Files", "apk"));

        // Open the file chooser dialog
        int returnValue = j.showOpenDialog(null);

        // Check that the user has selected a file
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            // Get the selected file
            File selectedFile = j.getSelectedFile();

            // Update the label with the selected file name
            apkFileNameLabel.setText(selectedFile.getName());
            
            // Store the selected file path in the class member variable
            selectedApkPath = selectedFile.toPath();
            
            decompileButton.setEnabled(true);
        }
    }//GEN-LAST:event_selectAPKFileButtonActionPerformed

    private void decompileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decompileButtonActionPerformed
        // TODO add your handling code here:
        // Ensure an APK file has been selected
        if (selectedApkPath == null) {
            JOptionPane.showMessageDialog(this, "Please select an APK file first.", "No File Selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String apkFileName = selectedApkPath.getFileName().toString();
        String apkBaseName = apkFileName.replaceFirst("[.][^.]+$", ""); // Remove the file extension
        outputDirectory = Paths.get(System.getProperty("user.dir"), "APK", apkBaseName);

        outputDirFile = outputDirectory.toFile();
        if (outputDirFile.exists()) {
            // Ask the user if they want to delete the existing directory
            int response = JOptionPane.showConfirmDialog(
                this,
                "The output directory already exists. Do you want to delete it and continue?",
                "Confirm Overwrite",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
            );
            if (response == JOptionPane.YES_OPTION) {
                // If yes, delete the directory
                boolean deleted = deleteDirectory(outputDirFile);
                if (!deleted) {
                    JOptionPane.showMessageDialog(this, "Failed to delete existing directory.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } else {
                // User chose not to overwrite, find a new unique directory name
                outputDirectory = findUniqueDirectory(outputDirectory);
            }
        }

        // Execute apktool.bat
        executeApktool(apkFileName);
    }//GEN-LAST:event_decompileButtonActionPerformed

    private void gitHubProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gitHubProfileButtonActionPerformed
        // TODO add your handling code here:
        openWebpage("https://github.com/ReSo7200");
    }//GEN-LAST:event_gitHubProfileButtonActionPerformed

    private void linkedInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedInButtonActionPerformed
        // TODO add your handling code here:
        openWebpage("https://www.linkedin.com/in/abdalhaleem-altamimi");
    }//GEN-LAST:event_linkedInButtonActionPerformed
    
    public static boolean deleteDirectory(File directoryToBeDeleted) {
        File[] allContents = directoryToBeDeleted.listFiles();
        if (allContents != null) {
            for (File file : allContents) {
                deleteDirectory(file);
            }
        }
        return directoryToBeDeleted.delete();
    }
     
    private Path findUniqueDirectory(Path baseOutputDirectory) {
        int counter = 1;
        Path uniqueDir = baseOutputDirectory;
        while (Files.exists(uniqueDir)) {
            // Append a numerical suffix to the directory name
            uniqueDir = Paths.get(baseOutputDirectory.toString() + "_" + counter);
            counter++;
        }
        return uniqueDir;
    }


   private void executeApktool(String apkFileName) {
        selectAPKFileButton.setEnabled(false);
        decompileButton.setEnabled(false);
        loadingLabel.setVisible(true);
        String apkToolPath = new File("src/obfuscateme/apktool.jar").getAbsolutePath();
        ProcessBuilder processBuilder = new ProcessBuilder(
            "java", "-jar", apkToolPath, "d", selectedApkPath.toAbsolutePath().toString(), "-o", outputDirectory.toAbsolutePath().toString()
        );

        // Redirect error stream to the output stream
        processBuilder.redirectErrorStream(true);

        // SwingWorker to handle the long-running task
        SwingWorker<Boolean, String> worker = new SwingWorker<Boolean, String>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                Process process = processBuilder.start();

                // Read output from the command
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
//                        System.out.println(line); // Print the apktool output to the console
                        publish(line); // Publish the progress data to process in the Swing thread
                    }
                }
                // Wait for the process to finish
                int exitCode = process.waitFor();
                return exitCode == 0;
            }

            @Override
            protected void process(List<String> chunks) {
                // Here you could update a progress bar or display info to the user
                progressHolderLabel.setVisible(true);
                progressHolderLabel.setEnabled(true);
                progressLabel.setVisible(true);
                progressLabel.setEnabled(true);
                for (String line : chunks) {
//                    System.out.println("Progress info: " + line);
                    if (line.startsWith("I:")) {
                        // Remove the "I:" prefix and any leading whitespace
                        String cleanLine = line.substring(line.indexOf("I:") + 2).trim();
                        System.out.println(cleanLine);
                        progressLabel.setText(cleanLine); // Update the text of the label
                    }
                }
            }

            @Override
            protected void done() {
                // This method is called when the background task is finished
                try {
                    // Get the result of the background computation from the SwingWorker
                    boolean success = get();
                    if (success) {
                        decompiledApkPath = outputDirectory.toAbsolutePath().toString();
                        publicAPKFileName = apkFileName;
                        decompileFolderName = String.valueOf(outputDirectory.getFileName());
                        loadingLabel.setVisible(false);
                        JOptionPane.showMessageDialog(null, "Decompilation completed successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                        dispose();
                        new Obfuscate().setVisible(true);
                        
                        
                    } else {
                        JOptionPane.showMessageDialog(null, "Decompilation failed.", "Decompilation Failed", JOptionPane.ERROR_MESSAGE);
                        selectAPKFileButton.setEnabled(true);
                        decompileButton.setEnabled(true);
                    }
                } catch (InterruptedException | ExecutionException e) {
                    JOptionPane.showMessageDialog(null, "An error occurred during decompilation.", "Error", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    selectAPKFileButton.setEnabled(true);
                    decompileButton.setEnabled(true);
                }
            }
        };

        // Start the SwingWorker
        worker.execute();
    }
   
   public static void openWebpage(String urlString) {
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                URI uri = new URI(urlString);
                desktop.browse(uri);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel apkFileNameLabel;
    private javax.swing.JButton decompileButton;
    private javax.swing.JButton gitHubProfileButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton linkedInButton;
    private javax.swing.JLabel loadingLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel progressHolderLabel;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JButton selectAPKFileButton;
    private javax.swing.JLabel selectedAPKFileLabel;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
    private Path selectedApkPath;
    private Path outputDirectory;
    public static File outputDirFile;
    public static String decompiledApkPath;
    public static String decompileFolderName;
    public static String publicAPKFileName;
    public static ImageIcon icon;
}
