/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package obfuscateme;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Abdalhaleem Altamimi - Student ID: 2113263
 */
public class Recompile extends javax.swing.JFrame {

    /**
     * Creates new form Recompile
     */
    public Recompile() {
        this.errorMessages = new ArrayList<>();
        initComponents();
        setIconImage(Main.icon.getImage());
        this.setLocationRelativeTo(null);
        consoleScrollPane.setVisible(false);
        apkFileNameLabel.setText(Main.publicAPKFileName);
        packageNameLabel.setText(Obfuscate.publicNameOfPackage);
        numberOfClassesLabel.setText(String.valueOf(Obfuscate.numberOfRefactoedClasses));
        numberOfMethodsLabel.setText(String.valueOf(Obfuscate.numberOfRefactoredMethods));
        numberOfLFieldsLabel.setText(String.valueOf(Obfuscate.numberOfRefactoredLFields));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        recompilePanel = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        selectedAPKFileLabel = new javax.swing.JLabel();
        apkFileNameLabel = new javax.swing.JLabel();
        selectedPackagesNumberLabel = new javax.swing.JLabel();
        packageNameLabel = new javax.swing.JLabel();
        numberOfOMethodsLabel = new javax.swing.JLabel();
        numberOfOClassesLabel = new javax.swing.JLabel();
        numberOfClassesLabel = new javax.swing.JLabel();
        numberOfMethodsLabel = new javax.swing.JLabel();
        signCheckBox = new javax.swing.JCheckBox();
        keyCheckBox = new javax.swing.JCheckBox();
        recombileButton = new javax.swing.JButton();
        gitHubProfileButton = new javax.swing.JButton();
        loadingLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        linkedInButton = new javax.swing.JButton();
        numberOfOFieldsLabel = new javax.swing.JLabel();
        numberOfLFieldsLabel = new javax.swing.JLabel();
        consoleScrollPane = new javax.swing.JScrollPane();
        consoleArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ObfuscateMe - Recompile");
        setResizable(false);

        recompilePanel.setLayout(null);

        title.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        title.setText("ObfuscateMe");
        recompilePanel.add(title);
        title.setBounds(255, 29, 114, 25);

        selectedAPKFileLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        selectedAPKFileLabel.setText("Selected APK file:");
        recompilePanel.add(selectedAPKFileLabel);
        selectedAPKFileLabel.setBounds(70, 70, 150, 25);

        apkFileNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        apkFileNameLabel.setForeground(new java.awt.Color(255, 0, 0));
        apkFileNameLabel.setText("APK file name");
        recompilePanel.add(apkFileNameLabel);
        apkFileNameLabel.setBounds(280, 70, 340, 25);

        selectedPackagesNumberLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        selectedPackagesNumberLabel.setText("Number of Package(s):");
        recompilePanel.add(selectedPackagesNumberLabel);
        selectedPackagesNumberLabel.setBounds(70, 110, 210, 25);

        packageNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        packageNameLabel.setForeground(new java.awt.Color(255, 0, 0));
        packageNameLabel.setText("Package Number");
        recompilePanel.add(packageNameLabel);
        packageNameLabel.setBounds(280, 110, 340, 25);

        numberOfOMethodsLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        numberOfOMethodsLabel.setText("Number of Obfuscated Methods:");
        recompilePanel.add(numberOfOMethodsLabel);
        numberOfOMethodsLabel.setBounds(180, 210, 190, 30);

        numberOfOClassesLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        numberOfOClassesLabel.setText("Number of Obfuscated Classes:");
        recompilePanel.add(numberOfOClassesLabel);
        numberOfOClassesLabel.setBounds(180, 180, 190, 30);

        numberOfClassesLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        numberOfClassesLabel.setForeground(new java.awt.Color(255, 0, 0));
        numberOfClassesLabel.setText("0");
        recompilePanel.add(numberOfClassesLabel);
        numberOfClassesLabel.setBounds(380, 180, 50, 30);

        numberOfMethodsLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        numberOfMethodsLabel.setForeground(new java.awt.Color(255, 0, 0));
        numberOfMethodsLabel.setText("0");
        recompilePanel.add(numberOfMethodsLabel);
        numberOfMethodsLabel.setBounds(380, 210, 50, 30);

        signCheckBox.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        signCheckBox.setText("Sign");
        signCheckBox.setBorder(null);
        signCheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        signCheckBox.setFocusable(false);
        signCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signCheckBoxActionPerformed(evt);
            }
        });
        recompilePanel.add(signCheckBox);
        signCheckBox.setBounds(210, 270, 60, 22);

        keyCheckBox.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        keyCheckBox.setText("Key");
        keyCheckBox.setBorder(null);
        keyCheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        keyCheckBox.setEnabled(false);
        keyCheckBox.setFocusable(false);
        recompilePanel.add(keyCheckBox);
        keyCheckBox.setBounds(290, 270, 60, 22);

        recombileButton.setText("Recompile");
        recombileButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        recombileButton.setFocusable(false);
        recombileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recombileButtonActionPerformed(evt);
            }
        });
        recompilePanel.add(recombileButton);
        recombileButton.setBounds(220, 320, 148, 46);

        gitHubProfileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obfuscateme/img/github-48.png"))); // NOI18N
        gitHubProfileButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        gitHubProfileButton.setFocusable(false);
        gitHubProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gitHubProfileButtonActionPerformed(evt);
            }
        });
        recompilePanel.add(gitHubProfileButton);
        gitHubProfileButton.setBounds(20, 430, 50, 50);

        loadingLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obfuscateme/img/loading.gif"))); // NOI18N
        recompilePanel.add(loadingLabel);
        loadingLabel.setBounds(270, 380, 48, 40);
        loadingLabel.setVisible(false);

        backButton.setText("Back to main page");
        backButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backButton.setFocusable(false);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        recompilePanel.add(backButton);
        backButton.setBounds(450, 430, 150, 50);

        linkedInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obfuscateme/img/linkedin.png"))); // NOI18N
        linkedInButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        linkedInButton.setFocusable(false);
        linkedInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkedInButtonActionPerformed(evt);
            }
        });
        recompilePanel.add(linkedInButton);
        linkedInButton.setBounds(80, 430, 50, 50);

        numberOfOFieldsLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        numberOfOFieldsLabel.setText("Number of Obfuscated Fields:");
        recompilePanel.add(numberOfOFieldsLabel);
        numberOfOFieldsLabel.setBounds(180, 240, 190, 30);

        numberOfLFieldsLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        numberOfLFieldsLabel.setForeground(new java.awt.Color(255, 0, 0));
        numberOfLFieldsLabel.setText("0");
        recompilePanel.add(numberOfLFieldsLabel);
        numberOfLFieldsLabel.setBounds(380, 240, 50, 30);

        consoleArea.setEditable(false);
        consoleArea.setBackground(new java.awt.Color(0, 0, 0));
        consoleArea.setColumns(20);
        consoleArea.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        consoleArea.setForeground(new java.awt.Color(255, 255, 255));
        consoleArea.setRows(5);
        consoleScrollPane.setViewportView(consoleArea);

        recompilePanel.add(consoleScrollPane);
        consoleScrollPane.setBounds(40, 150, 520, 160);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(recompilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(recompilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void recombileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recombileButtonActionPerformed
        // TODO add your handling code here:
        executeApktool();
    }//GEN-LAST:event_recombileButtonActionPerformed

    private void gitHubProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gitHubProfileButtonActionPerformed
        // TODO add your handling code here:
        Main.openWebpage("https://github.com/ReSo7200");
    }//GEN-LAST:event_gitHubProfileButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        dispose();
        new Main().setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void linkedInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkedInButtonActionPerformed
        // TODO add your handling code here:
        Main.openWebpage("https://www.linkedin.com/in/abdalhaleem-altamimi-074b5123a/");
    }//GEN-LAST:event_linkedInButtonActionPerformed

    private void signCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signCheckBoxActionPerformed
        // TODO add your handling code here:
        if (signCheckBox.isSelected()) {
            keyCheckBox.setEnabled(true);
        } else {
            keyCheckBox.setEnabled(false);
            keyCheckBox.setSelected(false);
        }
    }//GEN-LAST:event_signCheckBoxActionPerformed

    private void executeApktool() {
        JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setDialogTitle("Specify a file to save");

        // Get the current file name from Main.publicAPKFileName
        String originalFileName = Main.publicAPKFileName;
        if (originalFileName.endsWith(".apk")) {
            originalFileName = originalFileName.substring(0, originalFileName.length() - 4); // Remove ".apk"
        }
        fileChooser.setSelectedFile(new File(originalFileName + "_obfuscated.apk")); // Suggest a file name
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // Show save dialog; this method does not return until the dialog is closed
        int userSelection = fileChooser.showSaveDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            signCheckBox.setVisible(false);
            keyCheckBox.setVisible(false);
            numberOfOClassesLabel.setVisible(false);
            numberOfClassesLabel.setVisible(false);
            numberOfOMethodsLabel.setVisible(false);
            numberOfMethodsLabel.setVisible(false);
            numberOfOFieldsLabel.setVisible(false);
            numberOfLFieldsLabel.setVisible(false);
            recombileButton.setEnabled(false);
            fileToSave = fileChooser.getSelectedFile();
            consoleScrollPane.setVisible(true);
            backButton.setEnabled(false);
            consoleArea.append("Save as file: " + fileToSave.getAbsolutePath() + "\n");
            consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
            loadingLabel.setVisible(true);

            // Proceed with the recompilation using the selected file path
            String apkToolPath = new File("src/obfuscateme/apktool.jar").getAbsolutePath();
            Path sourceDirectory = Paths.get(Main.decompiledApkPath);

            ProcessBuilder processBuilder = new ProcessBuilder(
                    "java", "-jar", apkToolPath, "b", sourceDirectory.toAbsolutePath().toString(), "-o", fileToSave.getAbsolutePath()
            );

            processBuilder.redirectErrorStream(true);
            startRecompilationWorker(processBuilder);
        } else {
            // User canceled the dialog; you might want to handle this case.
            loadingLabel.setVisible(false);
            consoleArea.append("User canceled save operation. Recompilation not started.");
            consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
            backButton.setEnabled(true);
            signCheckBox.setEnabled(true);
        }
    }

    private void startRecompilationWorker(ProcessBuilder processBuilder) {
        SwingWorker<Boolean, String> worker = new SwingWorker<Boolean, String>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                Process process = processBuilder.start();
                boolean isErrorCaptured = false;

                try (BufferedReader stdInput = new BufferedReader(new InputStreamReader(process.getInputStream())); BufferedReader stdError = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {

                    String line;
                    while ((line = stdInput.readLine()) != null) {
                        publish(line); // Publish standard output lines
                    }
                    while ((line = stdError.readLine()) != null) {
                        errorMessages.add(line);
                        isErrorCaptured = true; // Indicate that we have captured errors
                    }
                } catch (Exception e) {
                    errorMessages.add("Exception in capturing output: " + e.getMessage());
                    isErrorCaptured = true;
                }
                int exitCode = process.waitFor();
                if (!isErrorCaptured) {
                    errorMessages.add("No error output captured, but exit code was " + exitCode);
                }
                return exitCode == 0;
            }

            @Override
            protected void process(List<String> chunks) {
                consoleScrollPane.setVisible(true);
                for (String line : chunks) {
                    if (line.startsWith("I:")) {
                        String cleanLine = line.substring(line.indexOf("I:") + 2).trim();
                        consoleArea.append(cleanLine + "\n");
                        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                    } else if (line.startsWith("ERROR:")) {
                        String errorMessage = line.substring("ERROR:".length()).trim();
                        consoleArea.append(errorMessage + "\n");  // You might want to show this differently or log it
                        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                    }
                }
            }

            @Override
            protected void done() {
                try {
                    boolean success = get();
                    if (success) {
                        //JOptionPane.showMessageDialog(null, "Recompilation completed successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                        consoleArea.append("Recompilation completed successfully.\n");
                        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                        // Additional actions upon successful recompilation

                        if (signCheckBox.isSelected()) {
                            signApkFile(fileToSave);

                        } else {
                            backButton.setEnabled(true);
                            loadingLabel.setVisible(false);
                            int response = JOptionPane.showConfirmDialog(null,
                                    "Do you want to open the directory of the APK file?",
                                    "Open APK Directory",
                                    JOptionPane.YES_NO_OPTION,
                                    JOptionPane.WARNING_MESSAGE
                            );
                            if (response == JOptionPane.YES_OPTION) {
                                // If yes, open the directory
                                File directory = fileToSave.getParentFile();
                                try {
                                    Desktop.getDesktop().open((directory));
                                } catch (IOException e) {
                                    JOptionPane.showMessageDialog(null, "An error occurred while trying to open");
                                }

                            }
                            int response1 = JOptionPane.showConfirmDialog(null,
                                    "Do you want to remove the folder of the decompiled APK file?",
                                    "Remove decompiled directory",
                                    JOptionPane.YES_NO_OPTION,
                                    JOptionPane.WARNING_MESSAGE
                            );
                            if (response1 == JOptionPane.YES_OPTION) {
                                // If yes, delete the directory
                                boolean deleted = Main.deleteDirectory(Main.outputDirFile);
                                if (!deleted) {
                                    JOptionPane.showMessageDialog(null, "Failed to delete existing directory.", "Error", JOptionPane.ERROR_MESSAGE);
                                    consoleArea.append("Failed to delete existing directory.\n");
                                } else {
                                    consoleArea.append("Removed decompiled directiry.\n");
                                    consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                                }

                            }
                        }

                    } else {
                        consoleArea.append("Error during recompilation:\n");
                        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());

                        if (errorMessages.isEmpty()) {
                            consoleArea.append("No error messages were captured.\n");
                        } else {
                            errorMessages.forEach(errorMessage -> consoleArea.append(errorMessage + "\n"));
                        }

                        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                        
                        JOptionPane.showMessageDialog(null, "Recompilation failed. Check the console for details.", "Recompilation Failed", JOptionPane.ERROR_MESSAGE);
                        dispose();
                        new Obfuscate().setVisible(true);
                    }

                } catch (InterruptedException | ExecutionException e) {
                    JOptionPane.showMessageDialog(null, "An error occurred during recompilation.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        };
        // Start the SwingWorker
        worker.execute();
    }

    private void signApkFile(File apkFile) {
        consoleArea.append("Signing APK file...\n");
        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
        String uberApkSignerPath = new File("src/obfuscateme/uber-apk-signer.jar").getAbsolutePath();
        ProcessBuilder processBuilder;

        if (!keyCheckBox.isSelected()) {
            // Auto-sign without a custom key if checkbox is not selected
            processBuilder = new ProcessBuilder(
                    "java", "-jar", uberApkSignerPath, "--apks", apkFile.getAbsolutePath()
            );
        } else {
            // Use JFileChooser to let the user select the keystore file
            JFileChooser fileChooser = new JFileChooser();
            // Only allow .jks files in the file chooser
            fileChooser.setFileFilter(new FileNameExtensionFilter("Java Keystore Files (*.jks)", "jks"));
            fileChooser.setDialogTitle("Select Keystore File");

            int userSelection = fileChooser.showOpenDialog(null); // Show the file chooser

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File keystoreFile = fileChooser.getSelectedFile();
                String keystorePath = keystoreFile.getAbsolutePath(); // Get the selected keystore path

                // Prompt the user for key alias, keystore password, and key password
                String keyAlias = JOptionPane.showInputDialog("Enter the key alias:");
                String keystorePassword = JOptionPane.showInputDialog("Enter the keystore password:");
                String keyPassword = JOptionPane.showInputDialog("Enter the key password:");

                if (keyAlias != null && keystorePassword != null && keyPassword != null) {
                    // Build the process to sign with the provided key details
                    processBuilder = new ProcessBuilder(
                            "java", "-jar", uberApkSignerPath,
                            "--apks", apkFile.getAbsolutePath(),
                            "--ks", keystorePath,
                            "--ksAlias", keyAlias,
                            "--ksPass", keystorePassword,
                            "--ksKeyPass", keyPassword
                    );
                } else {
                    // User canceled input, show options to retry, cancel, or auto-sign
                    handleUserCancel(apkFile);
                    return; // Exit the method after handling user decision
                }
            } else {
                // User canceled keystore selection, show options to retry, cancel, or auto-sign
                handleUserCancel(apkFile);
                return; // Exit the method after handling user decision
            }
        }

        // Continue with the APK signing process if a process builder is successfully created
        processBuilder.redirectErrorStream(true);

        SwingWorker<Boolean, String> worker = new SwingWorker<Boolean, String>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                Process process = processBuilder.start();

                try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        publish(line); // Publish progress data
                    }
                }
                int exitCode = process.waitFor();
                return exitCode == 0;
            }

            @Override
            protected void process(List<String> chunks) {
                for (String line : chunks) {
                    if (line.startsWith("I:") || line.startsWith("V:")) { // Filter informational or verbose messages
                        String cleanLine = line.substring(2).trim(); // Remove prefix and trim
                        consoleArea.append(cleanLine + "\n"); // Update the progress label
                        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                    }
                }
            }

            @Override
            protected void done() {
                try {
                    boolean success = get();
                    if (success) {
                        consoleArea.append("APK signing completed successfully.\n");
                        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                        loadingLabel.setVisible(false);
                        backButton.setEnabled(true);

                        int response = JOptionPane.showConfirmDialog(null,
                                "Do you want to open the directory of the APK file?",
                                "Open APK Directory",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.WARNING_MESSAGE
                        );
                        if (response == JOptionPane.YES_OPTION) {
                            File directory = fileToSave.getParentFile();
                            try {
                                Desktop.getDesktop().open((directory));
                            } catch (IOException e) {
                                JOptionPane.showMessageDialog(null, "An error occurred while trying to open the directory.");
                            }
                        }

                        int response1 = JOptionPane.showConfirmDialog(null,
                                "Do you want to remove the folder of the decompiled APK file?",
                                "Remove decompiled directory",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.WARNING_MESSAGE
                        );
                        
                        if (response1 == JOptionPane.YES_OPTION) {
                            boolean deleted = Main.deleteDirectory(Main.outputDirFile);
                            if (!deleted) {
                                JOptionPane.showMessageDialog(null, "Failed to delete existing directory.", "Error", JOptionPane.ERROR_MESSAGE);
                                consoleArea.append("Failed to delete existing directory.\n");
                            } else {
                                consoleArea.append("Removed decompiled directory.\nFeel free to close the tool or get back to the main menu.\n");
                            }
                        }
                        else{
                            consoleArea.append("Feel free to close the tool or get back to the main menu.\n");
                        }
                        
                        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                    } else {
                        JOptionPane.showMessageDialog(null, "APK signing failed.", "Signing Failed", JOptionPane.ERROR_MESSAGE);
                        consoleArea.append("APK signing failed.\n");
                        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                    }
                } catch (InterruptedException | ExecutionException e) {
                    JOptionPane.showMessageDialog(null, "An error occurred during APK signing.", "Error", JOptionPane.ERROR_MESSAGE);
                    consoleArea.append("An error occurred during APK signing.\n");
                    consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                }
            }
        };

        worker.execute(); // Execute the SwingWorker to perform APK signing in a background thread
    }

// Helper method to handle user cancel actions
    private void handleUserCancel(File apkFile) {
        int option = JOptionPane.showOptionDialog(
                null,
                "You canceled the key signing process. What would you like to do?",
                "Sign APK",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new String[]{"Cancel Signing", "Auto-sign without key", "Retry"}, // Options
                "Cancel Signing" // Default button
        );

        switch (option) {
            case 0: // Cancel Signing
                consoleArea.append("Signing canceled by user.\n");
                consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                break;

            case 1: // Auto-sign without key
                consoleArea.append("Auto-signing APK without a custom key...\n");
                consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                signApkFileWithoutKey(apkFile); // Use default signing method
                break;

            case 2: // Retry with key
                consoleArea.append("Retrying key signing...\n");
                consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                signApkFile(apkFile);  // Retry the signing process
                break;
        }
    }

// Method to auto-sign APK without a custom key
    private void signApkFileWithoutKey(File apkFile) {
        consoleArea.append("Signing APK file without custom key...\n");
        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
        String uberApkSignerPath = new File("src/obfuscateme/uber-apk-signer.jar").getAbsolutePath();
        ProcessBuilder processBuilder = new ProcessBuilder(
                "java", "-jar", uberApkSignerPath, "--apks", apkFile.getAbsolutePath()
        );

        processBuilder.redirectErrorStream(true);

        SwingWorker<Boolean, String> worker = new SwingWorker<Boolean, String>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                Process process = processBuilder.start();

                try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        publish(line); // Publish progress data
                    }
                }
                int exitCode = process.waitFor();
                return exitCode == 0;
            }

            @Override
            protected void process(List<String> chunks) {
                for (String line : chunks) {
                    if (line.startsWith("I:") || line.startsWith("V:")) { // Filter informational or verbose messages
                        String cleanLine = line.substring(2).trim(); // Remove prefix and trim
                        consoleArea.append(cleanLine + "\n"); // Update the progress label
                        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                    }
                }
            }

            @Override
            protected void done() {
                try {
                    boolean success = get();
                    if (success) {
                        consoleArea.append("APK signing completed successfully.\n");
                        consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                        loadingLabel.setVisible(false);
                        backButton.setEnabled(true);

                        int response = JOptionPane.showConfirmDialog(null,
                                "Do you want to open the directory of the APK file?",
                                "Open APK Directory",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.WARNING_MESSAGE
                        );
                        if (response == JOptionPane.YES_OPTION) {
                            File directory = fileToSave.getParentFile();
                            try {
                                Desktop.getDesktop().open((directory));
                            } catch (IOException e) {
                                JOptionPane.showMessageDialog(null, "An error occurred while trying to open the directory.");
                            }
                        }

                        int response1 = JOptionPane.showConfirmDialog(null,
                                "Do you want to remove the folder of the decompiled APK file?",
                                "Remove decompiled directory",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.WARNING_MESSAGE
                        );
                        if (response1 == JOptionPane.YES_OPTION) {
                            boolean deleted = Main.deleteDirectory(Main.outputDirFile);
                            if (!deleted) {
                                JOptionPane.showMessageDialog(null, "Failed to delete existing directory.", "Error", JOptionPane.ERROR_MESSAGE);
                            } else {
                                consoleArea.append("Removed decompiled directory\n");
                                consoleArea.setCaretPosition(consoleArea.getDocument().getLength());
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "APK signing failed.", "Signing Failed", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (InterruptedException | ExecutionException e) {
                    JOptionPane.showMessageDialog(null, "An error occurred during APK signing.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        };

        worker.execute(); // Execute the SwingWorker to perform APK signing in a background thread
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Recompile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Recompile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Recompile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Recompile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Recompile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel apkFileNameLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JTextArea consoleArea;
    private javax.swing.JScrollPane consoleScrollPane;
    private javax.swing.JButton gitHubProfileButton;
    private javax.swing.JCheckBox keyCheckBox;
    private javax.swing.JButton linkedInButton;
    private javax.swing.JLabel loadingLabel;
    private javax.swing.JLabel numberOfClassesLabel;
    private javax.swing.JLabel numberOfLFieldsLabel;
    private javax.swing.JLabel numberOfMethodsLabel;
    private javax.swing.JLabel numberOfOClassesLabel;
    private javax.swing.JLabel numberOfOFieldsLabel;
    private javax.swing.JLabel numberOfOMethodsLabel;
    private javax.swing.JLabel packageNameLabel;
    private javax.swing.JButton recombileButton;
    private javax.swing.JPanel recompilePanel;
    private javax.swing.JLabel selectedAPKFileLabel;
    private javax.swing.JLabel selectedPackagesNumberLabel;
    private javax.swing.JCheckBox signCheckBox;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
    public File fileToSave;
    private final List<String> errorMessages;

}
